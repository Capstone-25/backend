// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                @id @default(autoincrement())
  email           String             @unique
  password    String?            // 구글 소셜 로그인 위주라 선택적
  name            String
  authProvider    String?
  profileImageUrl String?
  ageGroup        String?
  gender          String?
  createdAt       DateTime           @default(now())
  lastLogin       DateTime?

  // Relations
  emotionLogs     EmotionLog[]
  journals        Journal[]
  goals           Goal[]
  chatSessions    ChatSession[]
  actionMissions  ActionMission[]
  contentUsages   ContentUsage[]
  emotionAnalyses EmotionAnalysis[]
  userInterests   UserInterest[]
  notifications   Notification[]
  calendarEvents  CalendarEvent[]
}

model EmotionLog {
  id             Int       @id @default(autoincrement())
  userId         Int
  date           DateTime
  primaryEmotion String
  emotionValues  Json
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt

  // Relations
  user     User    @relation(fields: [userId], references: [id])
  journals Journal[]
}

model Journal {
  id           Int       @id @default(autoincrement())
  userId       Int
  title        String?
  content      String
  emotionLogId Int?
  date         DateTime
  tags         String?
  isVoiceEntry Boolean   @default(false)
  voiceUrl     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt

  // Relations
  user       User         @relation(fields: [userId], references: [id])
  emotionLog EmotionLog?  @relation(fields: [emotionLogId], references: [id])
  attachments JournalAttachment[]
}

model JournalAttachment {
  id        Int       @id @default(autoincrement())
  journalId Int
  fileUrl   String
  fileType  String
  createdAt DateTime  @default(now())

  // Relation
  journal Journal @relation(fields: [journalId], references: [id])
}

model Goal {
  id           Int       @id @default(autoincrement())
  userId       Int
  title        String
  description  String?
  category     String?
  targetValue  Int
  unit         String
  currentValue Int       @default(0)
  startDate    DateTime
  deadline     DateTime?
  isCompleted  Boolean   @default(false)
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id])
  milestones   GoalMilestone[]
  progressLogs GoalProgress[]
}

model GoalMilestone {
  id          Int       @id @default(autoincrement())
  goalId      Int
  title       String
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  // Relations
  goal Goal @relation(fields: [goalId], references: [id])
}

model GoalProgress {
  id        Int       @id @default(autoincrement())
  goalId    Int
  value     Int
  date      DateTime
  notes     String?
  createdAt DateTime  @default(now())

  // Relation
  goal Goal @relation(fields: [goalId], references: [id])
}

model ChatSession {
  id        Int       @id @default(autoincrement())
  userId    Int
  title     String?
  persona   String    @default("supportive")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  // Relations
  user     User        @relation(fields: [userId], references: [id])
  messages ChatMessage[]
}

model ChatMessage {
  id         Int       @id @default(autoincrement())
  sessionId  Int
  sender     String
  content    String
  emotion    String?
  timestamp  DateTime  @default(now())

  // Relations
  chatSession   ChatSession   @relation(fields: [sessionId], references: [id])
  actionMissions ActionMission[]
}

model ActionMission {
  id            Int       @id @default(autoincrement())
  userId        Int
  title         String
  description   String
  chatMessageId Int?
  isCompleted   Boolean   @default(false)
  completedAt   DateTime?
  deadline      DateTime?
  createdAt     DateTime  @default(now())

  // Relations
  user        User         @relation(fields: [userId], references: [id])
  chatMessage ChatMessage? @relation(fields: [chatMessageId], references: [id])
}

model Content {
  id           Int       @id @default(autoincrement())
  title        String
  description  String?
  type         String
  category     String?
  difficulty   String?
  duration     Int?
  fileUrl      String
  thumbnailUrl String?
  createdAt    DateTime  @default(now())

  // Relations
  contentTags ContentTag[]
  usages      ContentUsage[]
}

model ContentTag {
  contentId Int
  tag       String

  @@id([contentId, tag])
  // Relation
  content Content @relation(fields: [contentId], references: [id])
}

model ContentUsage {
  id          Int       @id @default(autoincrement())
  userId      Int
  contentId   Int
  progress    Int?
  completed   Boolean   @default(false)
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  content Content @relation(fields: [contentId], references: [id])
}

model EmotionAnalysis {
  id           Int       @id @default(autoincrement())
  userId       Int
  periodStart  DateTime
  periodEnd    DateTime
  analysisData Json
  insights     String?
  createdAt    DateTime  @default(now())

  // Relation
  user User @relation(fields: [userId], references: [id])
}

model UserInterest {
  userId   Int
  interest String

  @@id([userId, interest])
  
  // Relation
  user User @relation(fields: [userId], references: [id])
}

model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int
  title       String
  content     String
  type        String
  referenceId Int?
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())

  // Relation
  user User @relation(fields: [userId], references: [id])
}

model CalendarEvent {
  id         Int       @id @default(autoincrement())
  userId     Int
  title      String
  description String?
  startTime  DateTime
  endTime    DateTime
  location   String?
  category   String?
  emotion    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt

  // Relation
  user User @relation(fields: [userId], references: [id])
}