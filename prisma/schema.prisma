generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                    @id @default(autoincrement())
  email                     String                 @unique
  name                      String
  profileImageUrl           String?
  gender                    String?
  createdAt                 DateTime               @default(now())
  lastLogin                 DateTime?
  authProvider              String?
  password                  String?
  currentHashedRefreshToken String?
  googleAccessToken         String?
  googleRefreshToken        String?
  googleTokenExpiry         DateTime?
  age                       Int?
  fcmToken                  String?                @unique
  calendarEvents            CalendarEvent[]
  chatSessions              ChatSession[]
  notifications             Notification[]
  notificationSchedules     NotificationSchedule[]
  userSurveys               UserSurvey[]
  chatAnalyses ChatAnalysis[]
  missions     Mission[]
}

model ChatSession {
  id        Int           @id @default(autoincrement())
  userId    Int
  title     String?
  persona   String        @default("26살_한여름")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  messages  ChatMessage[]
  user      User          @relation(fields: [userId], references: [id])
  missions     Mission[]
  chatAnalyses ChatAnalysis[]

  @@index([userId], map: "ChatSession_userId_fkey")
}

model ChatMessage {
  id             Int             @id @default(autoincrement())
  sessionId      Int
  sender         String
  content        String
  emotion        String?
  timestamp      DateTime        @default(now())
  chatSession    ChatSession     @relation(fields: [sessionId], references: [id])

  @@index([sessionId], map: "ChatMessage_sessionId_fkey")
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  content     String
  type        String
  referenceId Int?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Notification_userId_fkey")
}

model CalendarEvent {
  userId                Int
  description           String?
  location              String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  endTime               DateTime
  eventId               String                 @unique
  startTime             DateTime
  summary               String
  id                    Int                    @id @default(autoincrement())
  user                  User                   @relation(fields: [userId], references: [id])
  notificationSchedules NotificationSchedule[]

  @@index([userId])
  @@index([eventId])
}

model NotificationSchedule {
  id            Int           @id @default(autoincrement())
  eventId       Int
  userId        Int
  scheduledTime DateTime
  title         String
  body          String
  isSent        Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  event         CalendarEvent @relation(fields: [eventId], references: [id])
  user          User          @relation(fields: [userId], references: [id])

  @@index([eventId], map: "NotificationSchedule_eventId_fkey")
  @@index([userId], map: "NotificationSchedule_userId_fkey")
}

model SurveyCategory {
  id          Int                @id @default(autoincrement())
  name        String
  code        String             @unique
  assignments SurveyAssignment[]
  surveyTypes SurveyType[]
}

model SurveyType {
  id          Int                @id @default(autoincrement())
  code        String             @unique
  name        String
  description String?
  categoryId  Int
  type        String
  minScale    Int
  maxScale    Int
  assignments SurveyAssignment[]
  questions   SurveyQuestion[]
  results     SurveyResult[]
  category    SurveyCategory     @relation(fields: [categoryId], references: [id])
  userSurveys UserSurvey[]

  @@index([categoryId], map: "SurveyType_categoryId_fkey")
}

model SurveyQuestion {
  id           Int        @id @default(autoincrement())
  surveyTypeId Int
  ageGroup     String
  order        Int
  content      String
  isReverse    Boolean
  surveyType   SurveyType @relation(fields: [surveyTypeId], references: [id])

  @@index([surveyTypeId], map: "SurveyQuestion_surveyTypeId_fkey")
}

model UserSurvey {
  id             Int        @id @default(autoincrement())
  userId         Int
  surveyTypeId   Int
  createdAt      DateTime   @default(now())
  totalScore     Int
  interpretation String
  answers        Json
  surveyType     SurveyType @relation(fields: [surveyTypeId], references: [id])
  user           User       @relation(fields: [userId], references: [id])

  @@index([surveyTypeId], map: "UserSurvey_surveyTypeId_fkey")
  @@index([userId], map: "UserSurvey_userId_fkey")
}

model SurveyResult {
  id           Int        @id @default(autoincrement())
  surveyTypeId Int
  minScore     Int
  maxScore     Int
  label        String
  description  String?
  surveyType   SurveyType @relation(fields: [surveyTypeId], references: [id])

  @@index([surveyTypeId])
}

model SurveyAssignment {
  id           Int            @id @default(autoincrement())
  categoryId   Int
  ageGroup     String
  surveyTypeId Int
  category     SurveyCategory @relation(fields: [categoryId], references: [id])
  surveyType   SurveyType     @relation(fields: [surveyTypeId], references: [id])

  @@index([categoryId], map: "SurveyAssignment_categoryId_fkey")
  @@index([surveyTypeId], map: "SurveyAssignment_surveyTypeId_fkey")
}

model ChatAnalysis {
  id          Int      @id @default(autoincrement())
  chatId      Int
  userId      Int
  timestamp   DateTime
  topic       Json
  emotion     Json
  distortions Json
  createdAt   DateTime @default(now())
  chatSession ChatSession @relation(fields: [chatId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@index([chatId])
  @@index([userId])
}

model Mission {
  id        Int      @id @default(autoincrement())
  chatId    Int
  userId    Int
  title     String
  detail    String
  period    String
  frequency String
  isCompleted Boolean  @default(false)      // 완료 여부
  completedAt DateTime?                     // 완료 시각(선택)
  progress    Int?                          // 진행률(선택)
  createdAt DateTime @default(now())
  chatSession ChatSession @relation(fields: [chatId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@index([chatId])
  @@index([userId])
}
